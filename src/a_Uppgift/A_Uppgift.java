package a_Uppgift;

//Dennis Holm
//2024-03-15

public class A_Uppgift extends javax.swing.JFrame {
    //Skapar en slumpgenerator vi kommer använda oss av.
    java.util.Random random = new java.util.Random();
    
    //Variabler vi använder för räknare till antal jackpot och antal ronder.
    int rounds = 0;
    int nrWins = 0;

    //Variabler för första(för statistik) och nuvarande val.
    char initialPlayerChoice;
    char playerChoice;
    
    //Variabler vi använder till slumpgeneratorns val.
    int randomNumDoorA;
    int randomNumDoorB;
    int randomNumDoorC;
    int fiftyFifty;
    
    //Variabler som beskriver vad som befinner sig bakom dörrarna.
    String rewardDoorA;
    String rewardDoorB;
    String rewardDoorC;
      
    public A_Uppgift() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        txfMessageBox = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        btnDoorA = new javax.swing.JButton();
        btnDoorB = new javax.swing.JButton();
        btnDoorC = new javax.swing.JButton();
        lblInfoText1 = new javax.swing.JLabel();
        lblInfoText2 = new javax.swing.JLabel();
        lblInfoTextDynamic = new javax.swing.JLabel();
        lblDoorA = new javax.swing.JLabel();
        lblDoorB = new javax.swing.JLabel();
        lblDoorC = new javax.swing.JLabel();
        btnChangeDoor = new javax.swing.JButton();
        lblRound = new javax.swing.JLabel();
        lblRoundCounter = new javax.swing.JLabel();
        btnShowResult = new javax.swing.JButton();
        btnDontChangeDoor = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaResults = new javax.swing.JTextArea();
        btnPlay = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblWinsTotal = new javax.swing.JLabel();
        lblNrWins = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("A eller B, nu ska vi C");

        txfMessageBox.setEditable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        btnDoorA.setText("A");
        btnDoorA.setEnabled(false);
        btnDoorA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoorAActionPerformed(evt);
            }
        });

        btnDoorB.setText("B");
        btnDoorB.setEnabled(false);
        btnDoorB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoorBActionPerformed(evt);
            }
        });

        btnDoorC.setText("C");
        btnDoorC.setEnabled(false);
        btnDoorC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoorCActionPerformed(evt);
            }
        });

        lblInfoText1.setText("Bakom en av dörrarna finns en get, bakom en annan");

        lblInfoText2.setText("ingenting och bakom den sista finns jackpoten.");

        lblInfoTextDynamic.setText("Klicka på Spela för att köra igång!");

        lblDoorA.setText("DÖRR A");

        lblDoorB.setText("DÖRR B");

        lblDoorC.setText("DÖRR C");

        btnChangeDoor.setText("Byt dörr");
        btnChangeDoor.setEnabled(false);
        btnChangeDoor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeDoorActionPerformed(evt);
            }
        });

        lblRound.setText("Rond");

        btnShowResult.setText("Se resultat");
        btnShowResult.setEnabled(false);
        btnShowResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowResultActionPerformed(evt);
            }
        });

        btnDontChangeDoor.setText("Byt inte");
        btnDontChangeDoor.setEnabled(false);
        btnDontChangeDoor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDontChangeDoorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(lblDoorA)
                .addGap(54, 54, 54)
                .addComponent(lblDoorB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblDoorC)
                .addGap(52, 52, 52))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblRound)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblRoundCounter))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblInfoTextDynamic)
                            .addComponent(lblInfoText2)
                            .addComponent(lblInfoText1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnChangeDoor)
                                    .addComponent(btnDoorA, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(26, 26, 26)
                                        .addComponent(btnDoorB, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(28, 28, 28)
                                        .addComponent(btnDoorC, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(29, 29, 29)
                                        .addComponent(btnDontChangeDoor)
                                        .addGap(24, 24, 24)
                                        .addComponent(btnShowResult)))))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblInfoText1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInfoText2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInfoTextDynamic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnChangeDoor)
                            .addComponent(btnDontChangeDoor))
                        .addGap(3, 3, 3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnShowResult)
                        .addGap(4, 4, 4)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDoorA)
                    .addComponent(lblDoorC)
                    .addComponent(lblDoorB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDoorA, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDoorB, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDoorC, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRound)
                    .addComponent(lblRoundCounter)))
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        txaResults.setEditable(false);
        txaResults.setColumns(20);
        txaResults.setRows(5);
        jScrollPane1.setViewportView(txaResults);

        btnPlay.setText("Spela");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        jLabel1.setText("Resultat");

        lblWinsTotal.setText("Totalt antal jackpot:");

        lblNrWins.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblWinsTotal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblNrWins, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPlay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txfMessageBox)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(lblWinsTotal)
                            .addComponent(lblNrWins))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfMessageBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPlay))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Aktiverar Spela-knappen.
    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        
        //Ökar räknaren för ronder med 1 och skiver ut detta.
        ++rounds;
        lblRoundCounter.setText(Integer.toString(rounds));
        
        //Tänder knapparna för dörrarna och släcker Spela-knappen.
        btnDoorA.setEnabled(true);
        btnDoorB.setEnabled(true);
        btnDoorC.setEnabled(true);
        btnPlay.setEnabled(false);

        //Nollställer textfältet och ger instruktoner över knappvalen.
        txfMessageBox.setText("");
        lblInfoTextDynamic.setText("Välj en av dörrarna.");
    }//GEN-LAST:event_btnPlayActionPerformed
    //aktiverar val av dörr A.
    private void btnDoorAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoorAActionPerformed
        //Släcker dörr-knapparna och tänder byt/byt inte knapparna.
        btnDoorA.setEnabled(false);
        btnDoorB.setEnabled(false);
        btnDoorC.setEnabled(false);
        btnDontChangeDoor.setEnabled(true);
        btnChangeDoor.setEnabled(true); 
        lblInfoTextDynamic.setText("Vill du byta dörr?");
        
        //Tilldelar första och nuvarande val.
        initialPlayerChoice = 'A';
        playerChoice = initialPlayerChoice;
  
        //Tilldelar slumpmässigt dörrarna talen 1-3. med do-while ser vi till
        //att dörrarna inte tilldelas samma nummer.
        randomNumDoorA = random.nextInt(3) + 1;        
        do {
            randomNumDoorB = random.nextInt(3) + 1;
        }
        while (randomNumDoorA == randomNumDoorB);
        
        do {
            randomNumDoorC = random.nextInt(3) + 1;
        }
        while (randomNumDoorC == randomNumDoorB || randomNumDoorC == randomNumDoorA);
        
        //Talen namnges och tilldelas respektive dörrs variabel för vinst.
        switch (randomNumDoorA){
            case 1:
                rewardDoorA = "jackpot";
                break;
            case 2:
                rewardDoorA = "en get";
                break;
            case 3:
                rewardDoorA = "ingenting";
                break;
        }
        switch (randomNumDoorB){
            case 1:
                rewardDoorB = "jackpot";
                break;
            case 2:
                rewardDoorB = "en get";
                break;
            case 3:
                rewardDoorB = "ingenting";
                break;
        }
        switch (randomNumDoorC){
            case 1:
                rewardDoorC = "jackpot";
                break;
            case 2:
                rewardDoorC = "en get";
                break;
            case 3:
                rewardDoorC = "ingenting";
                break;
        }
        //De olika vinsterna kontrolleras och spelet avslösar get/inget dörren.
        //Vi vill inte att man ska kunna uppfatta ett system hur nästa
        //dörr avslöjas då ens första val var storvinsten, så vi slumpar
        //fram vilken som avslöjas i det fallet. Händelseförloppet skrivs ut
        //i textfältet.
        switch (randomNumDoorA) {
            case 1:
                fiftyFifty = random.nextInt(2) + 1;
                switch (fiftyFifty) {
                    case 1:
                        txfMessageBox.setText("Spelaren har valt dörr " 
                            + playerChoice + ". Bakom dörr B befinner sig " 
                            + rewardDoorB);
                        break;
                    case 2:
                        txfMessageBox.setText("Spelaren har valt dörr " 
                            + playerChoice + ". Bakom dörr C befinner sig " 
                            + rewardDoorC);
                        break;
                }
                break;
            case 2:
                if (randomNumDoorB == 1) {
                    txfMessageBox.setText("Spelaren har valt dörr " 
                        + playerChoice + ". Bakom dörr C befinner sig " 
                        + rewardDoorC);           
                }
                else if (randomNumDoorB == 3) {
                    txfMessageBox.setText("Spelaren har valt dörr " 
                        + playerChoice + ". Bakom dörr B befinner sig " 
                        + rewardDoorB);
                }
                break;
            case 3:
                if (randomNumDoorB == 1){
                    txfMessageBox.setText("Spelaren har valt dörr " 
                        + playerChoice + ". Bakom dörr C befinner sig " 
                        + rewardDoorC);                  
                }
                else if (randomNumDoorB == 2) {
                    txfMessageBox.setText("Spelaren har valt dörr " 
                        + playerChoice + ". Bakom dörr B befinner sig " 
                        + rewardDoorB);
                }
                break;
        }
        //Programmet väntar på att spelaren ska välja om den vill byta dörr.
    }//GEN-LAST:event_btnDoorAActionPerformed
    //Aktiverar Byt dörr-knappen.
    private void btnChangeDoorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeDoorActionPerformed
        //Släcker alla dörrar och knappar utom "Se resultat"-knappen som tänds.
        btnDoorA.setEnabled(false);
        btnDoorB.setEnabled(false);
        btnDoorC.setEnabled(false);
        btnChangeDoor.setEnabled(false);
        btnDontChangeDoor.setEnabled(false);
        btnShowResult.setEnabled(true);
      
        //Jämför spelarens val och vilken dörr som avslöjades efter det 
        //initiala valet och tilldelar spelarens nya val den tredje dörren.
        if(playerChoice == 'A') {
            switch (randomNumDoorA) {
                case 1:
                    switch (fiftyFifty) {
                        case 1:
                            playerChoice = 'C';
                            txfMessageBox.setText("Spelaren har valt dörr "
                                + initialPlayerChoice + ". Bakom dörr B "
                                + "befinner sig " + rewardDoorB
                                + ". Spelaren har bytt val till dörr " 
                                + playerChoice + ".");
                            break;
                        case 2:
                            playerChoice = 'B';
                                txfMessageBox.setText("Spelaren har valt dörr "
                                + initialPlayerChoice + ". Bakom dörr C "
                                + "befinner sig " + rewardDoorC 
                                + ". Spelaren har bytt val till dörr " 
                                + playerChoice + ".");
                            break;          
                    }
                    break;
                case 2:
                    if (randomNumDoorB == 1) {
                        playerChoice = 'B';
                        txfMessageBox.setText("Spelaren har valt dörr " 
                            + initialPlayerChoice + ". Bakom dörr C befinner "
                            + "sig " + rewardDoorC + ". Spelaren har valt att "
                            + "byta till dörr " + playerChoice + ".");
                    }
                    else if (randomNumDoorB == 3) {
                        playerChoice = 'C';
                        txfMessageBox.setText("Spelaren har valt dörr "
                            + initialPlayerChoice + ". Bakom dörr B befinner "
                            + "sig " + rewardDoorB + ". Spelaren har valt att "
                            + "byta till dörr " + playerChoice + ".");
                    }
                    break;
                case 3:
                    if (randomNumDoorB == 1){
                        playerChoice = 'B';
                        txfMessageBox.setText("Spelaren har valt dörr " 
                            + initialPlayerChoice + ". Bakom dörr C befinner "
                            + "sig " + rewardDoorC + ". Spelaren har valt att "
                            + "byta till dörr " + playerChoice + ".");                 
                    }
                    else if (randomNumDoorB == 2) {
                        playerChoice = 'C';
                        txfMessageBox.setText("Spelaren har valt dörr " 
                            + initialPlayerChoice + ". Bakom dörr B befinner "
                            + "sig " + rewardDoorB + ". Spelaren har valt att "
                            + "byta till dörr " + playerChoice + ".");
                    }
                    break;
            } 
        }
        else if(playerChoice == 'B') {
            switch (randomNumDoorB) {
                case 1:
                    switch (fiftyFifty) {
                        case 1:
                            playerChoice = 'C';
                            txfMessageBox.setText("Spelaren har valt dörr "
                                + initialPlayerChoice + ". Bakom dörr A "
                                + "befinner sig " + rewardDoorA
                                + ". Spelaren har bytt val till dörr " 
                                + playerChoice + ".");
                            break;
                        case 2:
                            playerChoice = 'A';
                                txfMessageBox.setText("Spelaren har valt dörr "
                                + initialPlayerChoice + ". Bakom dörr C finns "
                                + rewardDoorC + ". Spelaren har bytt val till "
                                + "dörr " + playerChoice + ".");
                            break;          
                    }
                    break;
                case 2:
                    if (randomNumDoorA == 1) {
                        playerChoice = 'A';
                        txfMessageBox.setText("Spelaren har valt dörr " 
                            + initialPlayerChoice + ". Bakom dörr C befinner "
                            + "sig " + rewardDoorC + ". Spelaren har valt att "
                            + "byta till dörr " + playerChoice + ".");
                    }
                    else if (randomNumDoorA == 3) {
                        playerChoice = 'C';
                        txfMessageBox.setText("Spelaren har valt dörr "
                            + initialPlayerChoice + ". Bakom dörr A befinner "
                            + "sig " + rewardDoorA + ". Spelaren har valt att "
                            + "byta till dörr " + playerChoice + ".");
                    }
                    break;
                case 3:
                    if (randomNumDoorA == 1){
                        playerChoice = 'A';
                        txfMessageBox.setText("Spelaren har valt dörr " 
                            + initialPlayerChoice + ". Bakom dörr C befinner "
                            + "sig " + rewardDoorC + ". Spelaren har valt att "
                            + "byta till dörr " + playerChoice + ".");                 
                    }
                    else if (randomNumDoorA == 2) {
                        playerChoice = 'C';
                        txfMessageBox.setText("Spelaren har valt dörr " 
                            + initialPlayerChoice + ". Bakom dörr A befinner "
                            + "sig " + rewardDoorA + ". Spelaren har valt att "
                            + "byta till dörr " + playerChoice + ".");
                    }
                    break;
            } 
        }
        else if(playerChoice == 'C') {
            switch (randomNumDoorC) {
                case 1:
                    switch (fiftyFifty) {
                        case 1:
                            playerChoice = 'A';
                            txfMessageBox.setText("Spelaren har valt dörr "
                                + initialPlayerChoice + ". Bakom dörr B "
                                + "befinner sig " + rewardDoorB
                                + ". Spelaren har bytt val till dörr " 
                                + playerChoice + ".");
                            break;
                        case 2:
                            playerChoice = 'B';
                                txfMessageBox.setText("Spelaren har valt dörr "
                                + initialPlayerChoice + ". Bakom dörr A finns "
                                + rewardDoorA + ". Spelaren har bytt val till "
                                + "dörr " + playerChoice + ".");
                            break;          
                    }
                    break;
                case 2:
                    if (randomNumDoorB == 1) {
                        playerChoice = 'B';
                        txfMessageBox.setText("Spelaren har valt dörr " 
                            + initialPlayerChoice + ". Bakom dörr A befinner "
                            + "sig " + rewardDoorA + ". Spelaren har valt att "
                            + "byta till dörr " + playerChoice + ".");
                    }
                    else if (randomNumDoorB == 3) {
                        playerChoice = 'A';
                        txfMessageBox.setText("Spelaren har valt dörr "
                            + initialPlayerChoice + ". Bakom dörr B befinner "
                            + "sig " + rewardDoorB + ". Spelaren har valt att "
                            + "byta till dörr " + playerChoice + ".");
                    }
                    break;
                case 3:
                    if (randomNumDoorB == 1){
                        playerChoice = 'B';
                        txfMessageBox.setText("Spelaren har valt dörr " 
                            + initialPlayerChoice + ". Bakom dörr A befinner sig "
                            + rewardDoorA + ". Spelaren har valt att byta till "
                            + "dörr " + playerChoice + ".");                 
                    }
                    else if (randomNumDoorB == 2) {
                        playerChoice = 'A';
                        txfMessageBox.setText("Spelaren har valt dörr " 
                            + initialPlayerChoice + ". Bakom dörr B befinner "
                            + "sig " + rewardDoorB + ". Spelaren har valt att "
                            + "byta till dörr " + playerChoice + ".");
                    }
                    break;
            } 
        }
        //Skriver ut en händelsetext i infotexten ovanför knappvalen.
        lblInfoTextDynamic.setText("Du bytte från dörr " + initialPlayerChoice
            + " till dörr " + playerChoice + ".");
        //Väntar på att spelaren ska klicka på Se resultat-knappen.
    }//GEN-LAST:event_btnChangeDoorActionPerformed
    //Aktiverar knappen Se resultat
    private void btnShowResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowResultActionPerformed
        btnShowResult.setEnabled(false);
        btnPlay.setEnabled(true);
        
        //Kontrollerar spelarens val, undersöker och skriver ut resultatet.
        //Lägger till ett på räknaren för jackpot vid vinst.
        if (playerChoice == 'A') {
            switch (randomNumDoorA) {
                case 1:
                    ++nrWins;
                    lblInfoTextDynamic.setText("Grattis! Du vann jackpoten!");
                    txfMessageBox.setText("Wow, grattis! Du prickade jackpoten!"
                        + " klicka på Spela-knappen för att starta en ny rond.");
                    break;
                case 2:
                    lblInfoTextDynamic.setText("Du har blivit en get rikare! "
                        + "Bättre än inget...");
                    txfMessageBox.setText("Tyvärr blev det ingen storvinst "
                        + "denna gång. klicka på Spela-knappen för att starta "
                        + "en ny rond.");

                    break;
                case 3:
                    lblInfoTextDynamic.setText("Du har blivit en get rikare! "
                        + "Bättre än inget...");
                    txfMessageBox.setText("Tyvärr blev det ingen storvinst "
                        + "denna gång. klicka på Spela-knappen för att starta "
                        + "en ny rond.");                    
                    lblInfoTextDynamic.setText("Bakom dörren fanns ingenting.");
                    break;
            }
        }
        else if (playerChoice == 'B') {
            switch (randomNumDoorB) {
                case 1:
                    ++nrWins;
                    lblInfoTextDynamic.setText("Grattis! Du vann jackpoten!");
                    txfMessageBox.setText("Wow, grattis! Du prickade jackpoten!"
                        + " klicka på Spela-knappen för att starta en ny rond.");
                    break;
                case 2:
                    lblInfoTextDynamic.setText("Du har blivit en get rikare! "
                        + "Bättre än inget...");
                    txfMessageBox.setText("Tyvärr blev det ingen storvinst "
                        + "denna gång. klicka på Spela-knappen för att starta "
                        + "en ny rond.");

                    break;
                case 3:
                    lblInfoTextDynamic.setText("Du har blivit en get rikare! "
                        + "Bättre än inget...");
                    txfMessageBox.setText("Tyvärr blev det ingen storvinst "
                        + "denna gång. klicka på Spela-knappen för att starta "
                        + "en ny rond.");                    
                    lblInfoTextDynamic.setText("Bakom dörren fanns ingenting.");
                    break;
            }
        }
        else if (playerChoice == 'C') {
            switch (randomNumDoorC) {
                case 1:
                    ++nrWins;
                    lblInfoTextDynamic.setText("Grattis! Du vann jackpoten!");
                    txfMessageBox.setText("Wow, grattis! Du prickade jackpoten!"
                        + " klicka på Spela-knappen för att starta en ny rond.");
                    break;
                case 2:
                    lblInfoTextDynamic.setText("Du har blivit en get rikare! "
                        + "Bättre än inget...");
                    txfMessageBox.setText("Tyvärr blev det ingen storvinst "
                        + "denna gång. klicka på Spela-knappen för att starta "
                        + "en ny rond.");

                    break;
                case 3:
                    lblInfoTextDynamic.setText("Du har blivit en get rikare! "
                        + "Bättre än inget...");
                    txfMessageBox.setText("Tyvärr blev det ingen storvinst "
                        + "denna gång. klicka på Spela-knappen för att starta "
                        + "en ny rond.");                    
                    lblInfoTextDynamic.setText("Bakom dörren fanns ingenting.");
                    break;
            }
        }
        //Räknaren för antalet jackpot uppdateras och resultatet skrivs ut i 
        //textarean Resultat. Olika utskrift beroende på om man valde att byta
        //dörr eller inte.
        lblNrWins.setText(Integer.toString(nrWins));
        if (initialPlayerChoice != playerChoice){
        txaResults.append("Rond " + rounds + ".\nFörsta val: Dörr " 
            + initialPlayerChoice + ".    Bytte till: Dörr " + playerChoice 
            + ".\nDörr A: " + rewardDoorA + ". | Dörr B: " + rewardDoorB 
            + ". | Dörr C: " + rewardDoorC + ".\n"
            + "----------------------------------------------------------"
            + "-----------\n");
        }
        else {
            txaResults.append("Rond " + rounds + ".\nFörsta val: Dörr " 
            + initialPlayerChoice + ".    Stod fast vid sitt val av Dörr " 
            + playerChoice + ".\nDörr A: " + rewardDoorA + ". | Dörr B: " 
            + rewardDoorB + ". | Dörr C: " + rewardDoorC + ".\n"
            + "----------------------------------------------------------"
            + "-----------\n");           
        }
        //Väntar på att spelaren ska starta en ny rond, eller stänga ner appen.
    }//GEN-LAST:event_btnShowResultActionPerformed
    //Aktiverar Byt inte-knappen.
    private void btnDontChangeDoorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDontChangeDoorActionPerformed
        //Släcker alla knappar förutom Se resultat-knappen.
        btnShowResult.setEnabled(true);
        btnDontChangeDoor.setEnabled(false);
        btnChangeDoor.setEnabled(false);        
        btnDoorA.setEnabled(false);
        btnDoorB.setEnabled(false);
        btnDoorC.setEnabled(false);
        
        //Skriver ut att spelaren valt att inte byta i infotexten.
        lblInfoTextDynamic.setText("Du står fast vid dörr " 
            + initialPlayerChoice + "... Kaxigt.");
        //Väntar på att spelaren ska aktivera Se resultat-knappen.
    }//GEN-LAST:event_btnDontChangeDoorActionPerformed
    //aktiverar val av dörr B.
    private void btnDoorBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoorBActionPerformed
        //Släcker dörr-knapparna och tänder byt/byt inte knapparna.
        btnDoorA.setEnabled(false);
        btnDoorB.setEnabled(false);
        btnDoorC.setEnabled(false);
        btnDontChangeDoor.setEnabled(true);
        btnChangeDoor.setEnabled(true); 
        lblInfoTextDynamic.setText("Vill du byta dörr?");
        
        //Tilldelar första och nuvarande val.
        initialPlayerChoice = 'B';
        playerChoice = initialPlayerChoice;
  
        //Tilldelar slumpmässigt dörrarna talen 1-3. med do-while ser vi till
        //att dörrarna inte tilldelas samma nummer.
        randomNumDoorA = random.nextInt(3) + 1;        
        do {
            randomNumDoorB = random.nextInt(3) + 1;
        }
        while (randomNumDoorA == randomNumDoorB);
        
        do {
            randomNumDoorC = random.nextInt(3) + 1;
        }
        while (randomNumDoorC == randomNumDoorB || randomNumDoorC == randomNumDoorA);
        
        //Översätter talen till vinsten med ett switch-statement för varje dörr.
        switch (randomNumDoorA){
            case 1:
                rewardDoorA = "jackpot";
                break;
            case 2:
                rewardDoorA = "en get";
                break;
            case 3:
                rewardDoorA = "ingenting";
                break;
        }
        switch (randomNumDoorB){
            case 1:
                rewardDoorB = "jackpot";
                break;
            case 2:
                rewardDoorB = "en get";
                break;
            case 3:
                rewardDoorB = "ingenting";
                break;
        }
        switch (randomNumDoorC){
            case 1:
                rewardDoorC = "jackpot";
                break;
            case 2:
                rewardDoorC = "en get";
                break;
            case 3:
                rewardDoorC = "ingenting";
                break;
        }
        //De olika vinsterna kontrolleras och spelet avslöjar get/inget dörren.
        //Vi vill inte att man ska kunna uppfatta ett system hur nästa
        //dörr avslöjas då ens första val var storvinsten, så vi slumpar
        //fram vilken som avslöjas i det fallet. Händelseförloppet skrivs ut
        //i textfältet.
        switch (randomNumDoorB) {
            case 1:
                fiftyFifty = random.nextInt(2) + 1;
                switch (fiftyFifty) {
                    case 1:
                        txfMessageBox.setText("Spelaren har valt dörr " 
                            + playerChoice + ". Bakom dörr A befinner sig " 
                            + rewardDoorA);
                        break;
                    case 2:
                        txfMessageBox.setText("Spelaren har valt dörr " 
                            + playerChoice + ". Bakom dörr C befinner sig " 
                            + rewardDoorC);
                        break;
                }
                break;
            case 2:
                if (randomNumDoorA == 1) {
                    txfMessageBox.setText("Spelaren har valt dörr " 
                        + playerChoice + ". Bakom dörr C befinner sig " 
                        + rewardDoorC);           
                }
                else if (randomNumDoorA == 3) {
                    txfMessageBox.setText("Spelaren har valt dörr " 
                        + playerChoice + ". Bakom dörr A befinner sig " 
                        + rewardDoorA);
                }
                break;
            case 3:
                if (randomNumDoorA == 1){
                    txfMessageBox.setText("Spelaren har valt dörr " 
                        + playerChoice + ". Bakom dörr C befinner sig " 
                        + rewardDoorC);                  
                }
                else if (randomNumDoorA == 2) {
                    txfMessageBox.setText("Spelaren har valt dörr " 
                        + playerChoice + ". Bakom dörr A befinner sig " 
                        + rewardDoorA);
            }
            break;
        }
        //Programmet väntar på att spelaren ska välja om den vill byta dörr.
    }//GEN-LAST:event_btnDoorBActionPerformed
    //aktiverar val av dörr C.
    private void btnDoorCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoorCActionPerformed
        //Släcker dörr-knapparna och tänder byt/byt inte knapparna.
        btnDoorA.setEnabled(false);
        btnDoorB.setEnabled(false);
        btnDoorC.setEnabled(false);
        btnDontChangeDoor.setEnabled(true);
        btnChangeDoor.setEnabled(true); 
        lblInfoTextDynamic.setText("Vill du byta dörr?");
        
        //Tilldelar första och nuvarande val.
        initialPlayerChoice = 'C';
        playerChoice = initialPlayerChoice;
  
        //Tilldelar slumpmässigt dörrarna talen 1-3. med do-while ser vi till
        //att dörrarna inte tilldelas samma nummer.
        randomNumDoorA = random.nextInt(3) + 1;        
        do {
            randomNumDoorB = random.nextInt(3) + 1;
        }
        while (randomNumDoorA == randomNumDoorB);
        
        do {
            randomNumDoorC = random.nextInt(3) + 1;
        }
        while (randomNumDoorC == randomNumDoorB || randomNumDoorC == randomNumDoorA);
        
        //Talen namnges och tilldelas respektive dörrs variabel för vinst.
        switch (randomNumDoorA){
            case 1:
                rewardDoorA = "jackpot";
                break;
            case 2:
                rewardDoorA = "en get";
                break;
            case 3:
                rewardDoorA = "ingenting";
                break;
        }
        switch (randomNumDoorB){
            case 1:
                rewardDoorB = "jackpot";
                break;
            case 2:
                rewardDoorB = "en get";
                break;
            case 3:
                rewardDoorB = "ingenting";
                break;
        }
        switch (randomNumDoorC){
            case 1:
                rewardDoorC = "jackpot";
                break;
            case 2:
                rewardDoorC = "en get";
                break;
            case 3:
                rewardDoorC = "ingenting";
                break;
        }
        //De olika vinsterna kontrolleras och spelet avslösar get/inget dörren.
        //Vi vill inte att man ska kunna uppfatta ett system hur nästa
        //dörr avslöjas då ens första val var storvinsten, så vi slumpar
        //fram vilken som avslöjas i det fallet. Händelseförloppet skrivs ut
        //i textfältet.
        switch (randomNumDoorC) {
            case 1:
                fiftyFifty = random.nextInt(2) + 1;
                switch (fiftyFifty) {
                    case 1:
                        txfMessageBox.setText("Spelaren har valt dörr " 
                            + playerChoice + ". Bakom dörr A befinner sig " 
                            + rewardDoorA);
                        break;
                    case 2:
                        txfMessageBox.setText("Spelaren har valt dörr " 
                            + playerChoice + ". Bakom dörr B befinner sig " 
                            + rewardDoorC);
                        break;
                }
                break;
            case 2:
                if (randomNumDoorA == 1) {
                    txfMessageBox.setText("Spelaren har valt dörr " 
                        + playerChoice + ". Bakom dörr B befinner sig " 
                        + rewardDoorB);           
                }
                else if (randomNumDoorA == 3) {
                    txfMessageBox.setText("Spelaren har valt dörr " 
                        + playerChoice + ". Bakom dörr A befinner sig " 
                        + rewardDoorA);
                }
                break;
            case 3:
                if (randomNumDoorA == 1){
                    txfMessageBox.setText("Spelaren har valt dörr " 
                        + playerChoice + ". Bakom dörr B befinner sig " 
                        + rewardDoorB);                  
                }
                else if (randomNumDoorA == 2) {
                    txfMessageBox.setText("Spelaren har valt dörr " 
                        + playerChoice + ". Bakom dörr A befinner sig " 
                        + rewardDoorA);
            }
            break;
        }
        //Programmet väntar på att spelaren ska välja om den vill byta dörr.
    }//GEN-LAST:event_btnDoorCActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(A_Uppgift.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(A_Uppgift.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(A_Uppgift.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(A_Uppgift.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new A_Uppgift().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChangeDoor;
    private javax.swing.JButton btnDontChangeDoor;
    private javax.swing.JButton btnDoorA;
    private javax.swing.JButton btnDoorB;
    private javax.swing.JButton btnDoorC;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnShowResult;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblDoorA;
    private javax.swing.JLabel lblDoorB;
    private javax.swing.JLabel lblDoorC;
    private javax.swing.JLabel lblInfoText1;
    private javax.swing.JLabel lblInfoText2;
    private javax.swing.JLabel lblInfoTextDynamic;
    private javax.swing.JLabel lblNrWins;
    private javax.swing.JLabel lblRound;
    private javax.swing.JLabel lblRoundCounter;
    private javax.swing.JLabel lblWinsTotal;
    private javax.swing.JTextArea txaResults;
    private javax.swing.JTextField txfMessageBox;
    // End of variables declaration//GEN-END:variables
}
